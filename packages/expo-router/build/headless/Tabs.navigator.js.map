{"version":3,"file":"Tabs.navigator.js","sourceRoot":"","sources":["../../src/headless/Tabs.navigator.tsx"],"names":[],"mappings":";;AAAA,+CAAiE;AACjE,qDAAuF;AAEvF,SAAS,YAAY,CAAC,EAAE,gBAAgB,EAAE,QAAQ,EAAE,aAAa,EAAE,WAAW,EAAE,YAAY,EAAE;IAC5F,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,WAAW,EAAE,iBAAiB,EAAE,GAAG,IAAA,6BAAoB,EAAC,kBAAS,EAAE;QAC5F,QAAQ;QACR,aAAa;QACb,gBAAgB;KACjB,CAAC,CAAC;IAEH,OAAO,CACL,CAAC,iBAAiB,CAChB;MAAA,CAAC,mBAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,EAAE,WAAW,CAAC,CAAC,CACnD;QAAA,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAClC,CAAC,wBAAS,CACR,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CACf,OAAO,CAAC,CAAC,GAAG,EAAE;gBACZ,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC;gBACxC,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC;oBAC5B,IAAI,EAAE,UAAU;oBAChB,MAAM,EAAE,KAAK,CAAC,GAAG;oBACjB,iBAAiB,EAAE,IAAI;iBACxB,CAAC,CAAC;gBAEH,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;oBACzC,UAAU,CAAC,QAAQ,CAAC;wBAClB,GAAG,mBAAU,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC;wBAC9C,MAAM,EAAE,KAAK,CAAC,GAAG;qBAClB,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC,CACF,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CACnB;YAAA,CAAC,mBAAI,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,mBAAI,CAClE;UAAA,EAAE,wBAAS,CAAC,CACb,CAAC,CACJ;MAAA,EAAE,mBAAI,CACN;MAAA,CAAC,mBAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC,CACvC;QAAA,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YAC7B,OAAO,CACL,CAAC,mBAAI,CACH,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CACf,KAAK,CAAC,CAAC,CAAC,yBAAU,CAAC,YAAY,EAAE,EAAE,OAAO,EAAE,CAAC,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CACnF;cAAA,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAClC;YAAA,EAAE,mBAAI,CAAC,CACR,CAAC;QACJ,CAAC,CAAC,CACJ;MAAA,EAAE,mBAAI,CACR;IAAA,EAAE,iBAAiB,CAAC,CACrB,CAAC;AACJ,CAAC","sourcesContent":["import { Text, Pressable, View, StyleSheet } from 'react-native';\nimport { useNavigationBuilder, TabRouter, TabActions } from '@react-navigation/native';\n\nfunction TabNavigator({ initialRouteName, children, screenOptions, tabBarStyle, contentStyle }) {\n  const { state, navigation, descriptors, NavigationContent } = useNavigationBuilder(TabRouter, {\n    children,\n    screenOptions,\n    initialRouteName,\n  });\n\n  return (\n    <NavigationContent>\n      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>\n        {state.routes.map((route, index) => (\n          <Pressable\n            key={route.key}\n            onPress={() => {\n              const isFocused = state.index === index;\n              const event = navigation.emit({\n                type: 'tabPress',\n                target: route.key,\n                canPreventDefault: true,\n              });\n\n              if (!isFocused && !event.defaultPrevented) {\n                navigation.dispatch({\n                  ...TabActions.jumpTo(route.name, route.params),\n                  target: state.key,\n                });\n              }\n            }}\n            style={{ flex: 1 }}>\n            <Text>{descriptors[route.key].options.title ?? route.name}</Text>\n          </Pressable>\n        ))}\n      </View>\n      <View style={[{ flex: 1 }, contentStyle]}>\n        {state.routes.map((route, i) => {\n          return (\n            <View\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { display: i === state.index ? 'flex' : 'none' }]}>\n              {descriptors[route.key].render()}\n            </View>\n          );\n        })}\n      </View>\n    </NavigationContent>\n  );\n}\n"]}