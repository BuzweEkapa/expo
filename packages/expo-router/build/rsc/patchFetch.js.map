{"version":3,"file":"patchFetch.js","sourceRoot":"","sources":["../../src/rsc/patchFetch.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright Â© 2024 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport class NetworkError extends Error {\n  code = 'NETWORK_ERROR';\n\n  constructor(\n    message: string,\n    public url: string\n  ) {\n    super(message);\n    this.name = 'NetworkError';\n  }\n}\n\nexport class MetroServerError extends Error {\n  code = 'METRO_SERVER_ERROR';\n\n  constructor(\n    errorObject: { message: string } & Record<string, any>,\n    public url: string\n  ) {\n    super(errorObject.message);\n    this.name = 'MetroServerError';\n\n    for (const key in errorObject) {\n      (this as any)[key] = errorObject[key];\n    }\n  }\n}\n\nexport class ReactServerError extends Error {\n  code = 'REACT_SERVER_ERROR';\n\n  constructor(\n    message: string,\n    public url: string,\n    public statusCode: number\n  ) {\n    super(message);\n    this.name = 'ReactServerError';\n  }\n}\n\nexport function patchErrorBox() {\n  if (typeof ErrorUtils === 'undefined') {\n    return;\n  }\n  //// This appears to never be called. Mostly LogBox is presented from an invasive patch on console.error.\n  const globalHandler = ErrorUtils.getGlobalHandler();\n\n  // @ts-expect-error\n  if (globalHandler?.__router_errors_patched) {\n    return;\n  }\n\n  const routerHandler = (error: any) => {\n    if (\n      error instanceof NetworkError ||\n      error instanceof MetroServerError ||\n      error instanceof ReactServerError\n    ) {\n      // Use root error boundary.\n      return;\n    }\n    globalHandler?.(error);\n  };\n  routerHandler.__router_errors_patched = true;\n\n  ErrorUtils.setGlobalHandler(routerHandler);\n}\n\n// Add error handling that is used in the ErrorBoundary\nexport function patchFetch() {\n  patchErrorBox();\n  // @ts-expect-error\n  if (globalThis.fetch.__router_errors_patched) {\n    return;\n  }\n\n  const originalFetch = globalThis.fetch;\n\n  Object.defineProperty(global, 'fetch', {\n    // value: fetch,\n    value: async function fetch(input: URL | RequestInfo, init?: RequestInit) {\n      //   throw new NetworkError('test error', input as string);\n\n      try {\n        return await originalFetch(input, init);\n      } catch (error: any) {\n        const url =\n          typeof input === 'string' ? input : input instanceof URL ? input.toString() : input.url;\n\n        if (error instanceof Error) {\n          // Based on community fetch polyfill error message.\n          if (\n            error.message.match(\n              /Network request failed: (The network connection was lost|Could not connect to the server)/\n            )\n          ) {\n            throw new NetworkError(error.message, url);\n          }\n        }\n        throw error;\n      }\n    },\n  });\n\n  // @ts-expect-error\n  globalThis.fetch.__router_errors_patched = true;\n}\n"]}